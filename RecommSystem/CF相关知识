一.基于近邻的协同过滤

1. 基本概念
(1)基于用户的协同过滤:把与目标用户A相似的用户的评分用来对A推荐,同组群体对每件物品的加权平均值用来计算用户A对某物品的预计评分。
本质是通过用户特征+用户画像构建出用户的相似度，然后去预测用户对哪些物品感兴趣,哪些不感兴趣，甚至用户发生某个行为后，通过相似的用户
将要发生的行为以及物品的本身特征，去预测出用户下一步最想要的物品或者对用户最有帮助的方案策略。

(2)基于物品的协同过滤: 首先确定一个物品集合S(为A用户历史购买商品的评分集合)，推荐目标B，
找出S集合中与B相似度最高的，然后预测任意用户对A对B的评价，通过S中找出B最相似的物品进行推荐。

区别：前者是利用用户的相似度，后者利用用户历史行为中物品之间的相似度。

2. 评分性质
(1)连续评分: 让用户评分为类似-10-10区间比较长的连续数值，因为太多，少用。
(2)间隔评分: 在连续基础上打上类似1-5分机制，类似豆瓣。
(3)顺序评分：类似评价为好，中，差这种有顺序的机制。这种有时候会设置为仅为好，坏没有中的偶数机制评分，
			 也就是让用户强制性判断出好坏，避免用户趋向于中性。
(4)二元评分; 类似顺序中的选俩个
(5)一元评分: 只有一个喜欢按钮, 当用户购买某商品时进行一个正面评价体现出用户是真的喜欢, 但有时候用户不买时也不一定不喜欢, 所以
			 该按钮设置在页面的下一页前面步骤,同时也简化了用户的操作。另外这种也属于隐式反馈。
			 
3. 物品评分的特性
长尾属性，小部分物品反复评分，也就是热门物品。意义如下：
(1) 高频物品倾向于利润低的，竞争激烈物品。低频物品往往利润更大(因为低频物品很多时候是很多人认为不合适的物品,少数情况是该物品质量或品牌名声不好)
	所以如何将处于尾巴的冷门物品推荐出去，也是推荐系统的考虑点。

(2) 低频物品评价少,更需要隐式反馈，而常用的推荐系统往往更擅长推荐热门，容易导致用户感到厌倦,制约了多样性。

(3) 热门商品和冷门要分开去训练。

4. 用户与用户的相似度：不同用户评价尺度不一样，所以要均值中心化,这种思想也可用在零售商的不同业态/商户/门店的差异性问题上。
 公式为：Suj = Ruj - μ。 最后再加上μ即可。 => Ruj预测值 = μ + ΣSim(u,v).(Ruj - μ) / |ΣSim(u,v)|

 
5. 相似度函数的变形 
(1) person改为余弦：比去均值中心更好,考虑到了用户不同商品的容忍度。
(2) 显著性加权：俩位用户共同评价分数小于阈值β时，消减因子加入，为 min{|Iu∩Uv|,β}/β。小于1，用Sim(v,u).min{|Iu∩Uv|,β}/β即可。
(3) 均值去中心化的变形: 加上标准差的摄入。标准差公式为：STD = 开个号下(Ruj - μ)^2/|Iu-1|  
    标准化后为： Zuj = Ruj - μ/STD = Suj/STD 
	最后公式为：Ruj预测值 = μ + STD.Σ Sim(u,v).Zuj/Σ|Sim(u,v)|
	为什么乘上STD标准差，因为评分归一化中使用了某函数g(.),在最终预测过程中需要使用其反函数。但是这种方式不一定得到更好的效果。
	因为它可能会超出评分范围，
(4) 加权法升级：指数级别放大，Sim(u,j) = Person(u,v)^a
(5) 可以将评分改为离散数据，好，中，坏，在评分很少时很有效果，但在颗粒度很细致的场景中健壮性差。
(6) 基于类似人群包相似度进行推荐，往往也是不错，但前提是人群包必须做的非常准，否则会出现效果更差的情况。

6. 长尾问题：热门的电影很难区分用户的相似行为，因为评分都很高,这个在文档检索中也很常见(a, an, the这类高频词)。所以此时用类似TF-IDF方法处理。
   假设mj为物品j的评价数,m为用户总数,那么物品j的权重wj定义如下： 
   wj = log(m/mj) j∈{1...n}.
   所以评价越多,物品越热门，权重越低。
   最终公式为： 
   Person(u,v) = Σk∈Iu∩Iv Wk.(Ruk - μu).(Rvk-μv)/开根号Σk∈Iu∩IvWk.(Ruk - μu)^2 . 开根号Σk∈Iu∩IvWk.(Rvk-μv)^2
   
 
7. 基于物品的模型。
利用余弦，也可以Person，但实验证明余弦更好。也是用去均值中心法。
问题：Person与余弦区别：
(1)余弦：
余弦相似度计算时采用评级项目item i与item j中所有用户的信息，即包括有填写评级与无填写评级（无填写评级的置0）的所有用户；
皮尔森系数与余弦相似度中U表示所有对i和j共同进行过评级的用户组成的组合；
总结：余弦相似度与其余二者在计算式选择的用户集合不同 。

(2) 皮尔森系数与修正余弦相似度的比较

从公式上看，这二者的区别就在于与之间的差别。
皮尔森系数中表示对i与j共同评级过的所有用户，他们对i的评级的平均值，即计算皮尔森系数时提取一个列为i与j，
行为对二者共同评级的用户组成的表格，并计算列i的平均值。
而余弦相似度中表示的是用户u已评级项目的平均值，即计算时未被评级的项目不采取置0而是直接忽略。
总结：皮尔森系数与余弦相似度之间的区别在于中心化的方式不同。


综合比较：
基于用户的协同过滤																					基于物品的协同过滤
性能	用于用户少的情形，用户太多时用户相似度矩阵计算代价大										用于物品数小于用户数的场景
领域	时效性强，用户个性化兴趣不明显																长尾物品丰富，用户个性化需求强
实时性	用户有新行为，不一定造成推荐结果立马变化													用户有新行为会导致推荐结果变化
冷启动	用户相似度矩阵每隔一段时间离线计算一次，新物品上线一段时间后可以将新物品推荐给感兴趣用户	新用户只要对某一物品感兴趣，就可以推荐相似的物品给他
推荐理由	难以提供令人信服的推荐解释																利用用户的历史行为给用户推荐做解释



























