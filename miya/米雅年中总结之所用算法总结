一. 算法相关技术
1.数据属性
(1)标称属性: 头发,颜色,或者人物的状态:已婚,程序员等。这类数据不是定量,无法用均值/中位数,用众数去中心趋势度量。
            PS:这类数据也可用众数补充缺失值(中心趋势度量往往可以用来补充缺失值).
(2) 均值,中位数,众数,中列数: 
    a.均值： 优点: 时间复杂度: O(n).计算速度快,sum(n+m)的栈方式计算。还可以根据加权取平均值(权重可以时出现比例，或者业务权重或者模型产生的权重)。
             缺点:对于异常/离群点数据很敏感，影响中心结果分布。
             解决方案: 根据离群点分左右对称倾斜,可以用3θ((x-avg)>3*std,满足这个公式定为离群点)/者截尾去均值法(前后2%左右)/Kmeans举例去离群点处理.
             解决方案带来的负面: 带来了时间消耗开支,具体需要根据情况酌情处理。
    
    b.中位数: 优点: 对于异常/离群点数受到的影响比较小。
              缺点：时间复杂度： n.log(n)+n/1 。 基本是比均值处理的N倍时间。因为排序目前最好的方法是归并+插入/快速+插入。但都无法走出n.log(n)的复杂度。
              解决方案:(1)在已知数据分布的情况下，分区计算，比如划分工资为1000-2000，2000-5000，50000-100000.。。。。 然后取中间的中位数即可。
                      (2) 插值计算求出中位数的近似值: median = (L1 + (N/2-(Σfreq))/freq(median))width
                          N是数量,L1是中位数区间下届, Σfreq是低于中位数区间的所有区间频率和,freq(median)是中位数区间的频率。width是中位数区间的宽度.
      
    c. 众数: 单峰(单个众数),双峰,多峰。
             部分业务场景需要的统计数据，并解决标称属性和部分业务的缺失特性.
             求众数近似值: 设众数为Mode,数据集为左或右倾斜:
             mean - mode ≈ 3 * (mean - median)
             
             
    d. 中列数: (min+max)/2,对称分布的均值的粗略估计。
             
    PS:时间复杂度为O(n)的求众数代码如下(这里定义的众数是超过一半的数),时间复杂度为O(n)
    java/c++版本(非指针): 
    int temp;
    int num = length(arr)
    for(int i =0,c = 0; i <num; i++ ){
     if(c==0){
       temp = arr[i];
       c++;
     }else{
       if(temp == arr[i])
         c++; 
       else
         c--;
     }
    }
    
    python版本:
    temp = arr[0]
    c = 0
    
    for i in arr:
        if c == 0:
            temp = arr[0]
            c += 1
        else:
            if temp == arr[i]:
                c += 1
            else:
                c -= 1
  (3) 二元属性: 就是bool类型, 0和1 
  (4) 序数属性: 描述类似于将连续型数值转为离散后的结果,比如某个区间用1表示，另一个区间用2表示，或者军人为1，士兵为2，学生为3.他们之间往往有某种关系。
               他们的中心趋势用众数/中位数(有序数列才能用中位数)表示，不能用均值。不能将不同类别的序数量化，比如1比0类型强多少。
               作用: (1) 将连续型数值分区间离散化,使其变得有序性。 0-20->低龄。 21-40-》中年龄....
                     (2) 主观测量,比如对问卷满意度调查评级为0：满意，1:一般满意...
               
  PS:以上三者类型数据都是定性，只是描述数据的特征,但无法量化(可测量),通常用数值型来量化(可测量)。
  (5) 数值属性: a.区间数据: 就是数字,但不能比较,比如10度比5度温暖2倍是不对。
                b.比例数据: 这种可以比较。重量,速度等。
  (6) 离散和连续:连续=数值，离散就是其他。
  (7) 中心趋势度量: 一组数据中大部分数据落在哪里。
  PS: 正倾斜： 众数小于中位数的数列。
      负倾斜:   众数大于中位数的数列。
             
    
2.数据处理
A.度量数据散布：极差，四分位数，方差，标准差，四分位数极差。
(1) 极差: 最大值 - 最小值。

(2) 分位数，2分位数和四分位数最常用。
四分位极差： IQR = Q3 - Q1。 这个是第三分位数-第一分位数。
Q1,Q2,Q3,Q4都是各自区间的中位数，Q越大，说明数据波动越大。
所以四分位极差的意义是越大说明数据波动越大。
其次，可以用Q1和Q3来挑离群点。Q3之上的1.5*IQR处的值以上或者Q1以下的1.5*IQR的值以下为
数学界默认的离群点，具体也根据数据分布来判断。

(3) 五数概括： 用5个数来概括数据分布。
最小值，Q1,中位数，Q3,最大值。 差距越大说明数据越不稳定。

(4) 盒图。体现了五数的概括。  这个不太懂，项目时在使用。
盒的端点在四分位数上。使得盒的长度是四分位数极差IQR.
中位数用盒内线标记。
盒外线延伸到最小和最大观测值。
如果观测值的最大值和最低值不到1.5 * IQR时，需要扩展他们。否贼在此终止。

(5) 方差和标准差
标准差关于均值的发散，仅当我们使用均值为中心度量时才使用。`
(1 - 1/k^2) * 100%的观测均值不超过k个标准差。 这句话你可以理解为 (x - avg(x))<=3*std(x) 也就是在均值为中心趋于分布时，用标准差来衡量波动性。

(6) 常用的距离公式与他们的应用意义
 距离的意义是在处理数据特征时,往往要进行相似性度量的考察,以及很多指标（推荐类）也需要进行一些相似性的计算，这时候都需要距离。
 a.欧式距离:   直接的距离差值和开方再开根号。表示真实的距离。
   曼哈顿S:    @1: 俩个点:开根号(x1-y1)^2 + (x2-y2)^2
   曼哈顿S=|X1-X2| + |Y1-Y2|，表示坐标距离，一般很少用，但如果你要求类似路程，或者家门口距离轻轨的真实距离，你就要用曼哈顿，此时欧式距离就是所谓的直线距离，并非人真实走的距离。
   闵可夫司基: 各个维度坐标差值开N次方的和再开N次方的根号。
              @2: 俩个N维: 开根号Σi=1(Xk1-Xj1)^2 或向量表示: 开根号(a-b).(a-b)^T
              优点: 体现绝对值的差异,跟方向无关系。比如我们分析用户活跃度,登陆次数,平均观看时用SQL规则/Kmeans聚类时就需要用欧式距离。
                    因为这类值往往是(1,10)和(10,100)的比较，此时相似度很高，用余弦不好，而该用绝对值的欧式距离,这样它们之间的差值很大，可以分析出。
              三者距离公式的区别:
                    (1) 由于导数原因,范数为1的曼哈顿在二次导数不变,一次导数比值下降,提前为0，会导致很多0的情况,更适合用特征的选择.欧式反之。
                    (2) 
                    
              缺点: 它将样本的不同属性（即各指标或各变量量纲）之间的差别等同看待，这一点有时不能满足实际要求。
                   比如年龄和学历对工资的影响，将年龄和学历同等看待；收入单位为元和收入单位为万元同等看待。
              改进方案: (1) 对于量纲不同的数据集，我们进行标准化处理，区间设置在[0,1]之间，减少量纲的影响。
                       (2) 对于数据带有波动时,对坐标加权，使变化较大的坐标比变化较小的坐标有较小的权系数。
              但是: 无论是加权(针对数据波动或业务需求)还是标准/归一化,我们都没考虑到总体变异对距离远近的影响,这点目前我是没想出解决方法。
              PS:总体变异性指个别差异数据导致整体数据产生了部分变异。
            

3.特征工程:
(1)


4.关联分析


5.聚类相关算法



6.深度学习RNN系列相关算法



7.传统时间序列相关算法



8.bagging类与boosting类以及延申的关于决策树算法总结




9.线性机器学习相关算法总结












二.框架与大数据相关技术
1.Spark

2.Tensorflow


3.ODPS(Hive)


4.shell调度


5.mysql同步













