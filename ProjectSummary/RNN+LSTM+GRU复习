RNN知识具体可以网络搜下，这里主要讲解如何设计LSTM网络，GRU同理。


import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

'''
初始化参数
'''
BATCH_START = 0                       # 初始化的输入数，这个项目中不设计。
TIME_STEPS = 20                       # 时间步长
BATCH_SIZE = 50                       # 迭代数量
INPUT_SIZE = 1                        # 输入数量
OUTPUT_SIZE = 1                       # 输出数量
CELL_SIZE = 10                        # 神经元个数
LR = 0.006                            # 学习率


def get_batch():
    global BATCH_START, TIME_STEPS
    # xs shape (50batch, 20steps)
    '''
    初始化输入数据的维度。因为RNN多个时间，所以我们的上限值是迭代数*时间步长。然后reshape成 横坐标->batch数。纵坐标:time_steps、
    '''
    xs = np.arange(BATCH_START, BATCH_START+TIME_STEPS*BATCH_SIZE).reshape((BATCH_SIZE, TIME_STEPS)) / (10*np.pi)
    seq = np.sin(xs)
    res = np.cos(xs)
    # 每次都加时间步长，因为我们的时间是
    BATCH_START += TIME_STEPS
    # plt.plot(xs[0, :], res[0, :], 'r', xs[0, :], seq[0, :], 'b--')
    # plt.show()
    # returned seq, res and xs: shape (batch, step, input)
    return [seq[:, :, np.newaxis], res[:, :, np.newaxis], xs]


class LSTMRNN(object):
    def __init__(self, n_steps, input_size, output_size, cell_size, batch_size):
        self.n_steps = n_steps
        self.input_size = input_size
        self.output_size = output_size
        self.cell_size = cell_size
        self.batch_size = batch_size
        with tf.name_scope('inputs'):
            '''
            我们的输入输出维度 是 batch,steps,输入/输出个数。n_steps 就是 time_steps
            '''
            self.xs = tf.placeholder(tf.float32, [None, n_steps, input_size], name='xs')
            self.ys = tf.placeholder(tf.float32, [None, n_steps, output_size], name='ys')
        with tf.variable_scope('in_hidden'):
            self.add_input_layer()
        with tf.variable_scope('LSTM_cell'):
            self.add_cell()
        with tf.variable_scope('out_hidden'):
            self.add_output_layer()
        with tf.name_scope('cost'):
            self.compute_cost()
        with tf.name_scope('train'):
            self.train_op = tf.train.AdamOptimizer(LR).minimize(self.cost)

    def add_input_layer(self,):
        # 输入值reshape成 -1 和 输入值。 我们的输入值即:batch*time_step ,每个样本(句子)的大小。
        l_in_x = tf.reshape(self.xs, [-1, self.input_size], name='2_2D')  # (batch * n_step, in_size)
        # 因为只有一层神经元，所以横坐标是每个样本的大小，纵坐标神经元个数。
        Ws_in = self._weight_variable([self.input_size, self.cell_size])
        # bs (cell_size, )
        bs_in = self._bias_variable([self.cell_size,])
        
        # l_in_y = (batch * n_steps, cell_size)
        #第一层的乘积: 输入值(batch*time*steps*样本大小) * 初始化参数w （样本大小,神经元个数）+ b
        with tf.name_scope('Wx_plus_b'):
            l_in_y = tf.matmul(l_in_x, Ws_in) + bs_in
        
        # reshape 成 [batch,time_steps,神经元个数]
        # reshape l_in_y ==> (batch, n_steps, cell_size)
        self.l_in_y = tf.reshape(l_in_y, [-1, self.n_steps, self.cell_size], name='2_3D')
    
    '''
    添加神经元个数。
    '''
    def add_cell(self):
        # 神经元数，
        # forget_bias：浮动，偏见增加了忘记门（见上文）。0.0从CudnnLSTM训练的检查点恢复时必须手动设置。
        # state_is_tuple 如果为True，接受并返回状态是的2元组c_state和m_state。如果为False，则它们沿列轴连接。后一种行为很快就会被弃用。
        lstm_cell = tf.contrib.rnn.BasicLSTMCell(self.cell_size, forget_bias=1.0, state_is_tuple=True)
        with tf.name_scope('initial_state'):
            self.cell_init_state = lstm_cell.zero_state(self.batch_size, dtype=tf.float32)
        self.cell_outputs, self.cell_final_state = tf.nn.dynamic_rnn(
            lstm_cell, self.l_in_y, initial_state=self.cell_init_state, time_major=False)

    def add_output_layer(self):
        # shape = (batch * steps, cell_size)
        l_out_x = tf.reshape(self.cell_outputs, [-1, self.cell_size], name='2_2D')
        Ws_out = self._weight_variable([self.cell_size, self.output_size])
        bs_out = self._bias_variable([self.output_size, ])
        # shape = (batch * steps, output_size)
        with tf.name_scope('Wx_plus_b'):
            self.pred = tf.matmul(l_out_x, Ws_out) + bs_out

    def compute_cost(self):
        losses = tf.contrib.legacy_seq2seq.sequence_loss_by_example(
            [tf.reshape(self.pred, [-1], name='reshape_pred')],
            [tf.reshape(self.ys, [-1], name='reshape_target')],
            [tf.ones([self.batch_size * self.n_steps], dtype=tf.float32)],
            average_across_timesteps=True,
            softmax_loss_function=self.ms_error,
            name='losses'
        )
        with tf.name_scope('average_cost'):
            self.cost = tf.div(
                tf.reduce_sum(losses, name='losses_sum'),
                self.batch_size,
                name='average_cost')
            tf.summary.scalar('cost', self.cost)

    @staticmethod
    def ms_error(labels, logits):
        return tf.square(tf.subtract(labels, logits))

    def _weight_variable(self, shape, name='weights'):
        initializer = tf.random_normal_initializer(mean=0., stddev=1.,)
        return tf.get_variable(shape=shape, initializer=initializer, name=name)

    def _bias_variable(self, shape, name='biases'):
        initializer = tf.constant_initializer(0.1)
        return tf.get_variable(name=name, shape=shape, initializer=initializer)


if __name__ == '__main__':
    model = LSTMRNN(TIME_STEPS, INPUT_SIZE, OUTPUT_SIZE, CELL_SIZE, BATCH_SIZE)
    sess = tf.Session()
    merged = tf.summary.merge_all()
    writer = tf.summary.FileWriter("logs", sess.graph)
    # tf.initialize_all_variables() no long valid from
    # 2017-03-02 if using tensorflow >= 0.12
    if int((tf.__version__).split('.')[1]) < 12 and int((tf.__version__).split('.')[0]) < 1:
        init = tf.initialize_all_variables()
    else:
        init = tf.global_variables_initializer()
    sess.run(init)
    # relocate to the local dir and run this line to view it on Chrome (http://0.0.0.0:6006/):
    # $ tensorboard --logdir='logs'

    plt.ion()
    plt.show()
    for i in range(200):
        seq, res, xs = get_batch()
        if i == 0:
            feed_dict = {
                    model.xs: seq,
                    model.ys: res,
                    # create initial state
            }
        else:
            feed_dict = {
                model.xs: seq,
                model.ys: res,
                model.cell_init_state: state    # use last state as the initial state for this run
            }

        _, cost, state, pred = sess.run(
            [model.train_op, model.cost, model.cell_final_state, model.pred],
            feed_dict=feed_dict)

        # plotting
        plt.plot(xs[0, :], res[0].flatten(), 'r', xs[0, :], pred.flatten()[:TIME_STEPS], 'b--')
        plt.ylim((-1.2, 1.2))
        plt.draw()
        plt.pause(0.3)

        if i % 20 == 0:
            print('cost: ', round(cost, 4))
            result = sess.run(merged, feed_dict)
            writer.add_summary(result, i)
            
            
            
            
            
            
            
 '''
 简单版本，只做分类
 '''
 import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

mnist = input_data.read_data_sets('MNIST_data',one_hot=True)


lr= 0.001
training_iters = 1000000
batch_size = 128

n_inputs = 28
n_steps = 28              # 相当于时间的steps数。
n_hidden_units = 128      # 神经元个数，就是横坐标的数量。
n_classes = 10


# 输入为三个，batch,样本大小，step数。
xs = tf.placeholder(tf.float32,[None,n_inputs,n_steps])
ys = tf.placeholder(tf.float32,[None,10])


weights = {
    'in':tf.Variable(tf.random_normal([n_inputs,n_hidden_units])),
    'out':tf.Variable(tf.random_normal([n_hidden_units,n_classes]))
}

biases = {
    'in':tf.Variable(tf.constant(0.1,shape=[n_hidden_units,])),
    'out':tf.Variable(tf.constant(0.1,shape=[n_classes,]))
}


def RNN(X,weights,biases):
    # hidden layer for input to cell
    # X(128,28,28)
    X = tf.reshape(X,[-1,n_inputs])
    X_in = tf.matmul(X,weights['in']) + biases['in']
    X_in = tf.reshape(X_in,[-1,n_steps,n_hidden_units])

    lstm_cell = tf.nn.rnn_cell.BasicLSTMCell(n_hidden_units,forget_bias=1.0,state_is_tuple=True)
    #这里生成的state是tuple类型的，因为声明了state_is_tuple参数
    init_state = lstm_cell.zero_state(batch_size,dtype=tf.float32)
    # dynamic_rnn创建递归神经。
    #time_major指时间点是不是在主要的维度，因为我们的num_steps在次维，所以定义为了false
    '''
    RNN的初始状态。如果cell.state_size是整数，则必须是Tensor适当的类型和形状[batch_size, cell.state_size]。
    如果cell.state_size是一个元组，这应该是具有形状的张量元组[batch_size, s] for s in cell.state_size。
    '''
    outputs,final_states = tf.nn.dynamic_rnn(lstm_cell,X_in,initial_state=init_state,time_major=False)

    #final_states[1] 就是短时记忆h
    results = tf.matmul(final_states[1],weights['out']) + biases['out']

    return results

prediction = RNN(xs,weights,biases)

cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=prediction,labels=ys))

train_step = tf.train.AdamOptimizer(lr).minimize(cross_entropy)

correct_pred = tf.equal(tf.argmax(prediction,axis=1),tf.argmax(ys,axis=1))
accuracy = tf.reduce_mean(tf.cast(correct_pred,tf.float32))

init = tf.global_variables_initializer()

with tf.Session() as sess:

    sess.run(init)
    step = 0
    while step * batch_size < training_iters:
        batch_xs, batch_ys = mnist.train.next_batch(batch_size)
        #一个step是一行
        batch_xs = batch_xs.reshape([batch_size,n_steps,n_inputs])
        sess.run(train_step,feed_dict={xs:batch_xs,ys:batch_ys})
        if step % 20 == 0:
            print(sess.run(accuracy, feed_dict={xs: batch_xs, ys: batch_ys}))

        step = step + 1
 
 
